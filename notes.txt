Dealing with async streams
  retries
  slowness
  debounce

reactive programming addresses concurrency
  Rx or Reactive Extensions by Microsoft
  originally for .NET ported to ever major language
  Angular, Apollo projects
  Bacon.js
  Elm language
  RxJava at Netflix

Everything is a stream
  from callback
  from promise
  from ajax
  from event
  from array...

Purity
  Isolate state (events example)

Rich toolbox to combine create, filter stream data
  "Lodash for streams"

history of handling async
  callbacks
    pyramid of doom
    multiple invocations
    error handling

  promises
    yield single value

  event emitters
    return values ignored?
    not first class values - can't pass as params
    miss events if you listen too late


Observer + Iterator pattern == Reactive eXtension Pattern
  resources are streams you subscribe to
  expressive way to manage streams

Syntax
  ES6
  CommonJS (Node)
  pipable operators in RxJS >= 6
    preferred approach - no prototype modification, tree shaking, etc

Marble diagrams
  http://rxmarbles.com/

Examples
